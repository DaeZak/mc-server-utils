#!/bin/bash
#/etc/init.d/minecraft
#version 0.4.1 2015-05-07 (YYYY-MM-DD)
#
### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs screen-cleanup
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

#Settings
WORLD='sleepyhollow'
SERVICE='forge-1.11.2-13.20.1.2386-universal.jar'

SCREENNAME='minecraft_server'
OPTIONS='nogui'
USERNAME='minecraft'
MCPATH='/var/minecraft'
MCSTORE='/var/minecraft/world_storage'
MCRAMDSK='/var/minecraft/minecraft_ramdisk'
BACKUPPATH='/media/remote.share/backups/minecraft/backups'
SNAPSHOTPATH='/media/remote.share/backups/minecraft/snapshots'
MAXHEAP=4096
HISTORY=2048
INVOCATION="java -server -Dfile.encoding=UTF-8 \
-Xmx${MAXHEAP}M -XX:MaxPermSize=256M \
-XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode \
-XX:-UseAdaptiveSizePolicy -XX:+DisableExplicitGC \
-XX:+UseCompressedOops -XX:+AggressiveOpts \
-XX:+UseFastAccessorMethods -XX:+OptimizeStringConcat \
-jar $SERVICE $OPTIONS" 

ME=`whoami`
as_user() {
  if [ "$ME" = "$USERNAME" ] ; then
    bash -c "$1"
  else
    sudo -H -u "$USERNAME" bash -c "$1"
  fi
}

mc_status() {
  ps aux |grep -F -v grep|grep -F -v SCREEN|grep -F --quiet $SERVICE
  return $?
}

mc_bootstrap() {
  if mc_status;
  then
    echo "$SERVICE is already running!"
  else
    echo "Starting $SERVICE with fresh world..."
    cd $MCPATH
    if [ -d $WORLD ];
    then
      echo "$WORLD already exists; try starting from ramdisk!"
      exit 1
    fi
    as_user "cd $MCPATH && screen -h $HISTORY -dmS ${SCREENNAME} $INVOCATION"
    sleep 7

    if mc_status;
    then
      echo "$SERVICE is now running."
    else
      echo "Error! Could not start $SERVICE!"
    fi
  fi
}

mc_start() {
  if mc_status;
  then
    echo "$SERVICE is already running!"
  else
    echo "Starting $SERVICE..."
    if [ -d $MCSTORE/$WORLD.bak ];
    then
      echo "Last $WORLD.bak still exists; crash warning! manual check required!!"
      exit 1
    fi
    cd $MCPATH
    if [ ! -d "$MCRAMDSK/$WORLD/data" ];
    then
      echo "Ram drive empty... prepping."
      as_user "rsync -r -t $MCSTORE/$WORLD/ $MCRAMDSK/$WORLD/"
    fi

    INVOCATION_FINAL="$INVOCATION"
    as_user "cd $MCPATH && screen -h $HISTORY -dmS ${SCREENNAME} $INVOCATION_FINAL"
    sleep 7
    if mc_status;
    then
      echo "$SERVICE is now running."
    else
      echo "Error! Could not start $SERVICE!"
    fi
  fi
}

mc_saveoff() {
  if mc_status;
  then
    echo "$SERVICE is running... suspending saves"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER BACKUP STARTING. Server going readonly...\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"save-off\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"save-all\"\015'"
    sync
    sleep 10
  else
    echo "$SERVICE is not running. Not suspending saves."
  fi
}

mc_saveon() {
  if mc_status;
  then
    echo "$SERVICE is running... re-enabling saves"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"save-on\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER BACKUP ENDED. Server going read-write...\"\015'"
  else
    echo "$SERVICE is not running. Not resuming saves."
  fi
}

mc_stop() {
  if mc_status;
  then
    echo "Stopping $SERVICE"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map...\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"save-all\"\015'"
    sleep 10
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"stop\"\015'"
    sleep 7
  else
    echo "$SERVICE was not running."
  fi

  if mc_status;
  then
    echo "Error! $SERVICE could not be stopped."
  else
    echo "$SERVICE is stopped."
  fi
} 

mc_backup() {
   mc_saveoff
   
   NOW=`date "+%Y-%m-%d_%Hh%M"`
   BACKUP_FILE="$BACKUPPATH/${WORLD}_${NOW}.tar"
   
   echo "Saving world to durable storage"
   if mc_status; then
     mc_disksaverun
   else
     mc_disksavehalt
   fi

   echo "Backing up minecraft world..."
   as_user "tar -C \"$MCSTORE\" -cf \"$BACKUP_FILE\" $WORLD"

   echo "Backing up $SERVICE"
   as_user "tar -C \"$MCPATH\" -rf \"$BACKUP_FILE\" $SERVICE"

   mc_saveon

   echo "Compressing backup..."
   as_user "gzip -f \"$BACKUP_FILE\""
   echo "Done."
}

mc_snapshot() {
   mc_saveoff
   
   NOW=`date "+%Y-%m-%d-%H-%M-%S"`
   SNAPSHOT_FILE="$SNAPSHOTPATH/${WORLD}/${NOW}.zip"
   
   echo "Saving world to durable storage"
   if mc_status; then
     mc_disksaverun
   else
     mc_disksavehalt
   fi

   echo "Snapshotting minecraft world..."
   as_user "zip -9 -v \"$SNAPSHOT_FILE\" -r \"$MCSTORE/$WORLD\" "

   mc_saveon

   echo "Done."
}

mc_command() {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null
  then
    pre_log_len=`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`
    echo "$SERVICE is running... executing command"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"$command\"\015'"
    sleep .3 # assumes that the command will run and print to the log
    # print output
    tail -n $[`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`-$pre_log_len] "$MCPATH/logs/latest.log"
  fi
}

mc_disksaverun() {
  if mc_status; then
    echo "Saving ramdrive to disk."
    if [ ! -d $MCRAMDSK/$WORLD/data ]; then
      echo "Error.. Minecraft world not in ram"
    else
      if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check
required!!!"
        exit 1
      fi
      if [ -d $MCSTORE/$WORLD ]; then
        as_user "mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak"
      fi

      TO_SCREEN="screen -p 0 -S minecraft -X eval 'stuff "
      as_user "$TO_SCREEN \"save-off\"\015'"
      as_user "$TO_SCREEN \"save-all\"\015'" 
      as_user "rsync -r -t $MCRAMDSK/$WORLD/ $MCSTORE/$WORLD/"
      as_user "$TO_SCREEN \"save-on\"\015'"

      if [ -d $MCSTORE/$WORLD.bak ]; then
        as_user "rm -r $MCSTORE/$WORLD.bak"
      fi
    fi
  else
    echo "Service is not running"
 fi
}

mc_disksavehalt() {
   echo "Saving ramdrive to disk."
    if [ ! -d $MCRAMDSK/$WORLD/data ]; then
     echo "Error.. Minecraft world not in ram"
   else
     if [ -d $MCSTORE/$WORLD.bak ]; then
        echo "last $WORLD.bak still exist, crashed warning! manual check
required!!!"
        exit 1
     fi
     if [ -d $MCSTORE/$WORLD ]; then
       as_user "mv $MCSTORE/$WORLD $MCSTORE/$WORLD.bak"
     fi

     echo "Saving, screen session closed"
     as_user "rsync -r -t $MCRAMDSK/$WORLD/ $MCSTORE/$WORLD/"

     if [ -d $MCSTORE/$WORLD.bak ]; then
       as_user "rm -r $MCSTORE/$WORLD.bak"
     fi
   fi
}

#Start-Stop here
case "$1" in
  bootstrap)
    mc_bootstrap
    ;;
  start)
    mc_start
    ;;
  stop)
    mc_stop
    mc_disksavehalt
    ;;
  restart)
    mc_stop
    mc_disksavehalt
    mc_start
    ;;
  backup)
    mc_disksaverun
    mc_backup
    ;;
  snapshot)
    mc_disksaverun
    mc_snapshot
    ;;
  disksavehalt)
    mc_disksavehalt
    ;;
  disksaverun)
    mc_disksaverun
    ;;
  status)
    if mc_status;
    then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is stopped."
    fi
    ;;
  command)
    if [ $# -gt 1 ]; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
  echo "Usage: $0 {backup|bootstrap|start|stop|status|restart|command \"server command\"|disksavehalt|disksaverun}"
  exit 1
  ;;
esac

exit 0
